name: Binary Ready - Veracode Static Code Analysis

run-name: Binary Ready - Static Code Analysis - ${{ github.event.client_payload.repository.name }}

on:
  repository_dispatch:
    types: [binary-ready-veracode-sast-policy-scan]

jobs:
  register:
    runs-on: ubuntu-latest
    steps:
    - uses: vincent-deng/veracode-github-app@aws-ecs-dynamodb
      with:
        callback_url: ${{ github.event.client_payload.callback_url }}
        sha: ${{ github.event.client_payload.sha }}
        branch: ${{ github.event.client_payload.branch }}
        run_id: ${{ github.run_id }}
        repository_owner: ${{ github.event.client_payload.repository.owner }}
        repository_name: ${{ github.event.client_payload.repository.name }}
        event_type: ${{ github.event.client_payload.event_type }}
        enforce: true
        
  policy_scan:
    needs: register
    runs-on: ubuntu-latest
    steps:
    - name: Download artifact
      id: download-artifact
      uses: dawidd6/action-download-artifact@v2
      with:
        github_token: ${{ github.event.client_payload.token }}
        run_id: ${{ github.event.client_payload.run_id }}
        repo: ${{ github.event.client_payload.repository.full_name }}
    - name: Get the name of the downloaded files
      run: |
        artifact_file=$(ls -1 ./veracode-artifact | head -n 1)
        echo "veracode_artifact=$artifact_file" >> $GITHUB_ENV
    - name: Veracoe Upload and Scan Action Step
      uses: veracode/veracode-uploadandscan-action@0.2.5
      id: upload_and_scan
      with:
        appname: ${{ github.event.client_payload.profile_name }}
        createprofile: true
        version: '${{ github.run_id }}'
        filepath: ./veracode-artifact/${{ env.veracode_artifact }}
        vid: '${{ secrets.API_ID }}'
        vkey: '${{ secrets.API_KEY }}'
        scanpollinginterval: 30
        scantimeout: 15
      continue-on-error: true

  get-policy-flaws:
    runs-on: ubuntu-latest
    needs: policy_scan
    container:
      image: veracode/api-signing:latest
    steps:
      # Note: this will only work up to about 500 flaws
      #		due to Veracode results limiting
      # See the get_flaws.sh script in the helpers directory
      #		for a more elaborate method
      - name: get policy flaws
        run: |
          cd /tmp
          export VERACODE_API_KEY_ID=${{ secrets.API_ID }}
          export VERACODE_API_KEY_SECRET=${{ secrets.API_KEY }}
          guid=$(http --auth-type veracode_hmac GET "https://api.veracode.com/appsec/v1/applications?name=${{ github.event.client_payload.profile_name }}" | jq -r '._embedded.applications[] | select(.profile.name == "${{ github.event.client_payload.profile_name }}") | .guid')
          echo GUID: ${guid}
          total_flaws=$(http --auth-type veracode_hmac GET "https://api.veracode.com/appsec/v2/applications/${guid}/findings?scan_type=STATIC&violates_policy=True" | jq -r '.page.total_elements')
          echo TOTAL_FLAWS: ${total_flaws}
          http --auth-type veracode_hmac GET "https://api.veracode.com/appsec/v2/applications/${guid}/findings?scan_type=STATIC&violates_policy=True&size=${total_flaws}" > policy_flaws.json
          results_url=$(http --auth-type veracode_hmac GET "https://api.veracode.com/appsec/v1/applications/${guid}" | jq -r '.results_url')
          echo RESULTS_URL: ${results_url}
          echo "https://analysiscenter.veracode.com/auth/index.jsp#${results_url}" > results_url.txt     
      - name: save results file
        uses: actions/upload-artifact@v3
        with:
          name: policy-flaws
          path: |
            /tmp/policy_flaws.json
            /tmp/results_url.txt
      - name: fail the pipeline for compliance
        run: |
          export VERACODE_API_KEY_ID=${{ secrets.API_ID }}
          export VERACODE_API_KEY_SECRET=${{ secrets.API_KEY }}
          guid=$(http --auth-type veracode_hmac GET "https://api.veracode.com/appsec/v1/applications?name=${{ github.event.client_payload.profile_name }}" | jq -r '._embedded.applications[] | select(.profile.name == "${{ github.event.client_payload.profile_name }}") | .guid')
          echo GUID: ${guid}
          total_flaws=$(http --auth-type veracode_hmac GET "https://api.veracode.com/appsec/v2/applications/${guid}/findings?scan_type=STATIC&violates_policy=True" | jq -r '.page.total_elements')
          if [ ${total_flaws} -gt 0 ]; then
            echo "Compliance not met, pipeline fails"
            exit 1
          else
            echo "Compliance met, pipeline continues"
          fi
